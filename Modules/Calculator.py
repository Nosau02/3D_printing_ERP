"""
FR, EN below:
Module de calcul de devis:

Ce module affiche l'entier de la base de donnée matière "materials.csv", permet de sélectionner une matière,
de saisir les informations du client et du projet, afin calculer le prix estimé du projet.

Le numéro du devis est généré automatiquement, il est composé comme suit:

DEV-AAAA-DDMM-Numéro séquentiel-Initiales du client (ex: DEV-2025-3112-000001-JD pour John Doe)

Ce numéro est unique et permet de retrouver facilement le devis, il est généré par la fonction get_number() du module Sequence.py.

Les pramètres de tarification sont importés depuis le fichier "princing.csv".   
Il permet également de sauvegarder le devis dans la base de donées "quote.csv".

%============

EN:
Quotation calculation module:

This module displays the entire materials database "materials.csv", allowing you to select a material,
enter customer and project information to calculate the estimated price of the project.

The estimate number is generated automatically and is composed as follows:

DEV-AAAA-DDMM-Sequential number-Customer initials (e.g. DEV-2025-3112-000001-JD for John Doe)

This number is unique and makes it easy to find the quote. It is generated by the get_number() function in the Sequence.py module.

Pricing parameters are imported from the "princing.csv" file.   
It can also be used to save the quote in the "quote.csv" database.

"""
from dash import html, dcc, dash_table, Input, Output, State, ctx
import dash_bootstrap_components as dbc
import pandas as pd
import plotly.express as px
from os import path
from datetime import datetime
from .Sequence import get_number # Imports relatifs ( module dans le même dossier)


# === Configuration de base ===
# Fichiers
MAT_FILE = "materials.csv"
QUOTE_FILE = "quote.csv"
PRICE_FILE = "pricing.csv"
FOLDER_PATH = path.split(path.dirname(__file__))[0]  # Dossier parent
DATA_PATH = path.join(FOLDER_PATH, "Data")
MAT_PATH = path.join(DATA_PATH, MAT_FILE)
QUOTE_PATH = path.join(DATA_PATH, QUOTE_FILE)
PRICE_PATH = path.join(DATA_PATH, PRICE_FILE)

# Charger la base de données matière
material_df = pd.read_csv(MAT_PATH)

#Charger la base de données de tarification
pricing_df = pd.read_csv(PRICE_PATH)

# Créer le fichier de devis s’il n’existe pas encore
if not path.exists(QUOTE_PATH):
    quote_columns = [
        "ID", "Last name", "First name", "Address", "City", "Project",
        "Design hours", "Printing hours", "Handling hours", "Mass (g)",
        "Material", "Price per kg", "Discount CHF", "Total price",
        "Emission date", "Status"
    ]
    pd.DataFrame(columns=quote_columns).to_csv(QUOTE_PATH, index=False)

# Ajout de la colonne "Delete" pour l'affichage dans le tableau
if "Delete" not in material_df.columns:
    material_df["Delete"] = "❌"


# === Layout pour intégration ===

def layout():
    return dbc.Container([

        html.H2("Calculation", className="text-primary text-center mt-3"),

        dbc.Row([
            dbc.Col([
                dbc.Row([
                    html.H5("Material selection"),
                    dash_table.DataTable(
                        id='calc-material-table',
                        columns=[{"name": i, "id": i} for i in material_df.columns if i not in ["Delete", "Empty spool weight", "Reference"]],
                        data=material_df.sort_values(by="Material").to_dict("records"),
                        row_selectable='single',
                        selected_rows=[],
                        page_size=10,
                        style_cell={"textAlign": "center"},
                        style_table={'height': '350px', 'overflowY': 'auto'}
                    )
                ]),
                dbc.Row([
                    html.Div(className="my-3"),
                    dbc.Button("Refresh", id="calc-btn-refresh", color="secondary", className="mb-2 w-100")
                ]),
                dbc.Row([
                    html.H5("Estimated cost breakdown", className="mb-4"),
                    dcc.Graph(id="calc-coast-breakdown", style={"height": "400px"})
                ])
            ], width=6),

            dbc.Col([
                html.H5("Quotation details"),
                dbc.Row([dbc.Label("Last name"), dbc.Input(id="calc-input-nom", type="text")]),
                dbc.Row([dbc.Label("First name"), dbc.Input(id="calc-input-prenom", type="text")]),
                dbc.Row([dbc.Label("Address"), dbc.Input(id="calc-input-adresse", type="text")]),
                dbc.Row([dbc.Label("NPA, city"), dbc.Input(id="calc-input-city", type="text")]),
                dbc.Row([dbc.Label("Project name"), dbc.Input(id="calc-input-projet", type="text")]),
                dbc.Row([dbc.Label("Design hours"), dbc.Input(id="calc-input-h-conception", type="number", step=0.01)]),
                dbc.Row([dbc.Label("Printing hours"), dbc.Input(id="calc-input-h-impression", type="number", step=0.01)]),
                dbc.Row([dbc.Label("Handling hours"), dbc.Input(id="calc-input-h-manutention", type="number", step=0.01)]),
                dbc.Row([dbc.Label("Model weight (g)"), dbc.Input(id="calc-input-masse", type="number", step=0.01)]),
                dbc.Row([dbc.Label("Discount (CHF)"), dbc.Input(id="calc-input-rabais", type="number", step=0.01, value=0)]),
                html.Br(),
                html.H5("Estimated price:", className="mt-2"),
                html.Div(id="calc-estimated-price", className="text-success fs-4"),
                html.Br(),
                dbc.Button("Save quotation", id="calc-save-quotation", color="success"),
                html.Div(id="calc-quotation-saved", className="mt-2 text-info")
            ], width=6)
        ])
    ], fluid=True)


# === Fonctions utilitaires ===
# Mise à jour de la base de données matière
def load_data():
    if path.exists(MAT_PATH):
        return pd.read_csv(MAT_PATH)
    return pd.DataFrame(columns=[
        "Material", "Type", "Color", "Price",
        "Brand", "Reference", "Supplyer",
        "Empty spool weight"
    ])


# === Callbacks ===

def register_callbacks(app):
    @app.callback(
        Output("calc-estimated-price", "children"),
        Output("calc-quotation-saved", "children"),
        Output("calc-coast-breakdown", "figure"),
        Output("calc-material-table", "data"),
        Input("calc-save-quotation", "n_clicks"),  
        Input('calc-btn-refresh', 'n_clicks'),
        Input("calc-input-nom", "value"),
        Input("calc-input-prenom", "value"),
        Input("calc-input-adresse", "value"),
        Input("calc-input-city", "value"),
        Input("calc-input-projet", "value"),
        Input("calc-input-h-conception", "value"),
        Input("calc-input-h-impression", "value"),
        Input("calc-input-h-manutention", "value"),
        Input("calc-input-masse", "value"),
        Input("calc-input-rabais", "value"),
        State("calc-material-table", "selected_rows"),
        State("calc-material-table", "data"),
        prevent_initial_call=False,
        allow_duplicate=True  # <-- Pour éviter les erreurs si importé plusieurs fois
    )
    def handle_all_events(n1, n2, nom, prenom, adresse, city, projet, h_conc, h_impr, h_man, masse, rabais, selected_rows, table_data):
        material_df = pd.read_csv(MAT_PATH)

        # Vérification qu'une matière est sélectionnée
        if not selected_rows:
            return "Please select a material.","", {}, material_df.sort_values(by="Material").to_dict("records")
        
        # Par défaut, aucun message
        message = ""

        # Récupération des données de la ligne sélectionnée
        matiere = table_data[selected_rows[0]]
        prix_matiere = matiere.get("Price", 0)

        # Importation de la tarification
        taux_conception = pricing_df["Design"].iloc[0]
        taux_impression = pricing_df["Printing"].iloc[0]
        taux_manutention = pricing_df["Handeling"].iloc[0]
        taux_majoration = pricing_df["Material markup"].iloc[0]

        # Coûts par poste
        cout_conception = (h_conc or 0) * taux_conception
        cout_impression = (h_impr or 0) * taux_impression
        cout_manutention = (h_man or 0) * taux_manutention
        cout_matiere = (masse or 0) / 1000 * taux_majoration * prix_matiere

        # Prix total
        prix_total = cout_conception + cout_impression + cout_manutention + cout_matiere
        prix_remise = prix_total - (rabais or 0)

        # Bouton de sauvegarde du devis
        if ctx.triggered_id == "calc-save-quotation":
            
            # Genération de l'ID du devis
            quote_id = get_number("DEV",f"{prenom} {nom}")
            
            # Date d'émission
            date_now = datetime.now().strftime("%Y-%m-%d")

            # Récupération des données du devis
            devis_data = pd.DataFrame([{
                "ID": quote_id,
                "Last name": nom,
                "First name": prenom,
                "Address": adresse,
                "City": city,
                "Project": projet,
                "Design hours": h_conc,
                "Printing hours": h_impr,
                "Handling hours": h_man,
                "Mass (g)": masse,
                "Material": matiere.get("Material"),
                "Price per kg": prix_matiere,
                "Discount CHF": rabais,
                "Total price": round(prix_remise, 2),
                "Emission date": date_now,
                "Status": "Issued"
            }])

            # Sauvegarde du devis dans le fichier CSV
            if path.exists(QUOTE_PATH):
                devis_data.to_csv(QUOTE_PATH, mode='a', index=False, header=False)
            else:
                devis_data.to_csv(QUOTE_PATH, index=False)

            message = f"Quotation #{quote_id} successfully saved."

        # Rafraîchissement manuel
        elif ctx.triggered_id == 'calc-btn-refresh':
            material_df = load_data()  # relit le CSV du disque
            message = "🔄 Data refreshed."

        # Graphique de répartition des coûts
        labels = ["Design", "Printing", "Handling", "Material"]
        values = [float(cout_conception), float(cout_impression), float(cout_manutention), float(cout_matiere)]
        fig = px.pie(names=labels, values=values, title="Estimated Cost Breakdown")

        return f"{prix_remise:.2f} CHF", message, fig, material_df.sort_values(by="Material").to_dict("records")


# === Exécution en standalone ===

if __name__ == '__main__':
    from dash import Dash
    app = Dash(__name__, external_stylesheets=[dbc.themes.CERULEAN])
    app.layout = layout()
    register_callbacks(app)
    app.run(debug=True)
